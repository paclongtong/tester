// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using friction_tester;

#nullable disable

namespace friction_tester.Migrations
{
    [DbContext(typeof(TestResultsContext))]
    [Migration("20250301190750_RemoveAdditionalInfoColumn")]
    partial class RemoveAdditionalInfoColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Acceleration")
                        .HasColumnType("real")
                        .HasColumnName("acceleration");

                    b.Property<bool>("AnomaliesDetected")
                        .HasColumnType("boolean")
                        .HasColumnName("anomalies_detected");

                    b.Property<float>("DistanceCovered")
                        .HasColumnType("real")
                        .HasColumnName("distance_covered");

                    b.Property<float>("EndPosition")
                        .HasColumnType("real")
                        .HasColumnName("end_position");

                    b.Property<string>("OperatorName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("operator_name");

                    b.Property<float>("StartPosition")
                        .HasColumnType("real")
                        .HasColumnName("start_position");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("test_name");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<double>("TotalDuration")
                        .HasColumnType("double precision")
                        .HasColumnName("total_duration");

                    b.Property<float>("Velocity")
                        .HasColumnType("real")
                        .HasColumnName("velocity");

                    b.Property<string>("WorkpieceName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("workpiece_name");

                    b.HasKey("Id");

                    b.ToTable("test_results", (string)null);
                });

            modelBuilder.Entity("friction_tester.SensorData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Position")
                        .HasColumnType("double precision")
                        .HasColumnName("position");

                    b.Property<double>("SensorValue")
                        .HasColumnType("double precision")
                        .HasColumnName("sensor_value");

                    b.Property<int>("TestId")
                        .HasColumnType("integer")
                        .HasColumnName("test_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("sensor_data", (string)null);
                });

            modelBuilder.Entity("friction_tester.SensorData", b =>
                {
                    b.HasOne("TestResult", "TestResult")
                        .WithMany("SensorData")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("TestResult", b =>
                {
                    b.Navigation("SensorData");
                });
#pragma warning restore 612, 618
        }
    }
}
